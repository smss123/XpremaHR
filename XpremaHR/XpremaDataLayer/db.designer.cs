#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XpremaDataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="XpremaHR")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAccountDaily(AccountDaily instance);
    partial void UpdateAccountDaily(AccountDaily instance);
    partial void DeleteAccountDaily(AccountDaily instance);
    partial void InsertAccountCategory(AccountCategory instance);
    partial void UpdateAccountCategory(AccountCategory instance);
    partial void DeleteAccountCategory(AccountCategory instance);
    partial void InsertExpenss(Expenss instance);
    partial void UpdateExpenss(Expenss instance);
    partial void DeleteExpenss(Expenss instance);
    partial void InsertExpenssesMovment(ExpenssesMovment instance);
    partial void UpdateExpenssesMovment(ExpenssesMovment instance);
    partial void DeleteExpenssesMovment(ExpenssesMovment instance);
    #endregion
		
		public dbDataContext() : 
				base(global::XpremaDataLayer.Properties.Settings.Default.XpremaHRConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<AccountDaily> AccountDailies
		{
			get
			{
				return this.GetTable<AccountDaily>();
			}
		}
		
		public System.Data.Linq.Table<AccountCategory> AccountCategories
		{
			get
			{
				return this.GetTable<AccountCategory>();
			}
		}
		
		public System.Data.Linq.Table<Expenss> Expensses
		{
			get
			{
				return this.GetTable<Expenss>();
			}
		}
		
		public System.Data.Linq.Table<ExpenssesMovment> ExpenssesMovments
		{
			get
			{
				return this.GetTable<ExpenssesMovment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AccountName;
		
		private string _Description;
		
		private System.Nullable<int> _CategoryID;
		
		private EntitySet<AccountDaily> _AccountDailies;
		
		private EntitySet<Expenss> _Expensses;
		
		private EntityRef<AccountCategory> _AccountCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    #endregion
		
		public Account()
		{
			this._AccountDailies = new EntitySet<AccountDaily>(new Action<AccountDaily>(this.attach_AccountDailies), new Action<AccountDaily>(this.detach_AccountDailies));
			this._Expensses = new EntitySet<Expenss>(new Action<Expenss>(this.attach_Expensses), new Action<Expenss>(this.detach_Expensses));
			this._AccountCategory = default(EntityRef<AccountCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="NVarChar(50)")]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this.OnAccountNameChanging(value);
					this.SendPropertyChanging();
					this._AccountName = value;
					this.SendPropertyChanged("AccountName");
					this.OnAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._AccountCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountDaily", Storage="_AccountDailies", ThisKey="ID", OtherKey="AccountID")]
		public EntitySet<AccountDaily> AccountDailies
		{
			get
			{
				return this._AccountDailies;
			}
			set
			{
				this._AccountDailies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Expenss", Storage="_Expensses", ThisKey="ID", OtherKey="AccountID")]
		public EntitySet<Expenss> Expensses
		{
			get
			{
				return this._Expensses;
			}
			set
			{
				this._Expensses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCategory_Account", Storage="_AccountCategory", ThisKey="CategoryID", OtherKey="ID", IsForeignKey=true)]
		public AccountCategory AccountCategory
		{
			get
			{
				return this._AccountCategory.Entity;
			}
			set
			{
				AccountCategory previousValue = this._AccountCategory.Entity;
				if (((previousValue != value) 
							|| (this._AccountCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountCategory.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._AccountCategory.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._CategoryID = value.ID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AccountCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountDailies(AccountDaily entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountDailies(AccountDaily entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Expensses(Expenss entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Expensses(Expenss entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.AccountDaily")]
	public partial class AccountDaily : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AccountID;
		
		private System.Nullable<double> _TotalIn;
		
		private System.Nullable<double> _TotalOut;
		
		private System.Nullable<System.DateTime> _DateOfProcess;
		
		private string _Description;
		
		private string _CommandArg;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccountIDChanging(System.Nullable<int> value);
    partial void OnAccountIDChanged();
    partial void OnTotalInChanging(System.Nullable<double> value);
    partial void OnTotalInChanged();
    partial void OnTotalOutChanging(System.Nullable<double> value);
    partial void OnTotalOutChanged();
    partial void OnDateOfProcessChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfProcessChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCommandArgChanging(string value);
    partial void OnCommandArgChanged();
    #endregion
		
		public AccountDaily()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int")]
		public System.Nullable<int> AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalIn", DbType="Float")]
		public System.Nullable<double> TotalIn
		{
			get
			{
				return this._TotalIn;
			}
			set
			{
				if ((this._TotalIn != value))
				{
					this.OnTotalInChanging(value);
					this.SendPropertyChanging();
					this._TotalIn = value;
					this.SendPropertyChanged("TotalIn");
					this.OnTotalInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalOut", DbType="Float")]
		public System.Nullable<double> TotalOut
		{
			get
			{
				return this._TotalOut;
			}
			set
			{
				if ((this._TotalOut != value))
				{
					this.OnTotalOutChanging(value);
					this.SendPropertyChanging();
					this._TotalOut = value;
					this.SendPropertyChanged("TotalOut");
					this.OnTotalOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfProcess", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfProcess
		{
			get
			{
				return this._DateOfProcess;
			}
			set
			{
				if ((this._DateOfProcess != value))
				{
					this.OnDateOfProcessChanging(value);
					this.SendPropertyChanging();
					this._DateOfProcess = value;
					this.SendPropertyChanged("DateOfProcess");
					this.OnDateOfProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandArg", DbType="NVarChar(50)")]
		public string CommandArg
		{
			get
			{
				return this._CommandArg;
			}
			set
			{
				if ((this._CommandArg != value))
				{
					this.OnCommandArgChanging(value);
					this.SendPropertyChanging();
					this._CommandArg = value;
					this.SendPropertyChanged("CommandArg");
					this.OnCommandArgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountDaily", Storage="_Account", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountDailies.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountDailies.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.AccountCategory")]
	public partial class AccountCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AccountCategoryName;
		
		private string _Description;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccountCategoryNameChanging(string value);
    partial void OnAccountCategoryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public AccountCategory()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountCategoryName", DbType="NVarChar(50)")]
		public string AccountCategoryName
		{
			get
			{
				return this._AccountCategoryName;
			}
			set
			{
				if ((this._AccountCategoryName != value))
				{
					this.OnAccountCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._AccountCategoryName = value;
					this.SendPropertyChanged("AccountCategoryName");
					this.OnAccountCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCategory_Account", Storage="_Accounts", ThisKey="ID", OtherKey="CategoryID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountCategory = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.Expensses")]
	public partial class Expenss : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ExpenssesName;
		
		private string _Description;
		
		private System.Nullable<int> _AccountID;
		
		private EntitySet<ExpenssesMovment> _ExpenssesMovments;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExpenssesNameChanging(string value);
    partial void OnExpenssesNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAccountIDChanging(System.Nullable<int> value);
    partial void OnAccountIDChanged();
    #endregion
		
		public Expenss()
		{
			this._ExpenssesMovments = new EntitySet<ExpenssesMovment>(new Action<ExpenssesMovment>(this.attach_ExpenssesMovments), new Action<ExpenssesMovment>(this.detach_ExpenssesMovments));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenssesName", DbType="NVarChar(50)")]
		public string ExpenssesName
		{
			get
			{
				return this._ExpenssesName;
			}
			set
			{
				if ((this._ExpenssesName != value))
				{
					this.OnExpenssesNameChanging(value);
					this.SendPropertyChanging();
					this._ExpenssesName = value;
					this.SendPropertyChanged("ExpenssesName");
					this.OnExpenssesNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int")]
		public System.Nullable<int> AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expenss_ExpenssesMovment", Storage="_ExpenssesMovments", ThisKey="ID", OtherKey="ExpenssesID")]
		public EntitySet<ExpenssesMovment> ExpenssesMovments
		{
			get
			{
				return this._ExpenssesMovments;
			}
			set
			{
				this._ExpenssesMovments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Expenss", Storage="_Account", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Expensses.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Expensses.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpenssesMovments(ExpenssesMovment entity)
		{
			this.SendPropertyChanging();
			entity.Expenss = this;
		}
		
		private void detach_ExpenssesMovments(ExpenssesMovment entity)
		{
			this.SendPropertyChanging();
			entity.Expenss = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.ExpenssesMovment")]
	public partial class ExpenssesMovment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ExpenssesID;
		
		private System.Nullable<double> _Amount;
		
		private System.Nullable<System.DateTime> _DateOfProcess;
		
		private string _Description;
		
		private EntityRef<Expenss> _Expenss;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExpenssesIDChanging(System.Nullable<int> value);
    partial void OnExpenssesIDChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnDateOfProcessChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfProcessChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ExpenssesMovment()
		{
			this._Expenss = default(EntityRef<Expenss>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenssesID", DbType="Int")]
		public System.Nullable<int> ExpenssesID
		{
			get
			{
				return this._ExpenssesID;
			}
			set
			{
				if ((this._ExpenssesID != value))
				{
					if (this._Expenss.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpenssesIDChanging(value);
					this.SendPropertyChanging();
					this._ExpenssesID = value;
					this.SendPropertyChanged("ExpenssesID");
					this.OnExpenssesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfProcess", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfProcess
		{
			get
			{
				return this._DateOfProcess;
			}
			set
			{
				if ((this._DateOfProcess != value))
				{
					this.OnDateOfProcessChanging(value);
					this.SendPropertyChanging();
					this._DateOfProcess = value;
					this.SendPropertyChanged("DateOfProcess");
					this.OnDateOfProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expenss_ExpenssesMovment", Storage="_Expenss", ThisKey="ExpenssesID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Expenss Expenss
		{
			get
			{
				return this._Expenss.Entity;
			}
			set
			{
				Expenss previousValue = this._Expenss.Entity;
				if (((previousValue != value) 
							|| (this._Expenss.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expenss.Entity = null;
						previousValue.ExpenssesMovments.Remove(this);
					}
					this._Expenss.Entity = value;
					if ((value != null))
					{
						value.ExpenssesMovments.Add(this);
						this._ExpenssesID = value.ID;
					}
					else
					{
						this._ExpenssesID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expenss");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
