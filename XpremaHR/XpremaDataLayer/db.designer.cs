#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XpremaDataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="XpremaHR")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAccountCategory(AccountCategory instance);
    partial void UpdateAccountCategory(AccountCategory instance);
    partial void DeleteAccountCategory(AccountCategory instance);
    partial void InsertAccountDaily(AccountDaily instance);
    partial void UpdateAccountDaily(AccountDaily instance);
    partial void DeleteAccountDaily(AccountDaily instance);
    partial void InsertExpenss(Expenss instance);
    partial void UpdateExpenss(Expenss instance);
    partial void DeleteExpenss(Expenss instance);
    partial void InsertExpenssesMovment(ExpenssesMovment instance);
    partial void UpdateExpenssesMovment(ExpenssesMovment instance);
    partial void DeleteExpenssesMovment(ExpenssesMovment instance);
    partial void InsertEmployeeBasicInfo(EmployeeBasicInfo instance);
    partial void UpdateEmployeeBasicInfo(EmployeeBasicInfo instance);
    partial void DeleteEmployeeBasicInfo(EmployeeBasicInfo instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    partial void InsertJobGroup(JobGroup instance);
    partial void UpdateJobGroup(JobGroup instance);
    partial void DeleteJobGroup(JobGroup instance);
    partial void InsertSalaryItem(SalaryItem instance);
    partial void UpdateSalaryItem(SalaryItem instance);
    partial void DeleteSalaryItem(SalaryItem instance);
    partial void InsertSalaryProfile(SalaryProfile instance);
    partial void UpdateSalaryProfile(SalaryProfile instance);
    partial void DeleteSalaryProfile(SalaryProfile instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertGroupPermession(GroupPermession instance);
    partial void UpdateGroupPermession(GroupPermession instance);
    partial void DeleteGroupPermession(GroupPermession instance);
    partial void InsertSystemPermession(SystemPermession instance);
    partial void UpdateSystemPermession(SystemPermession instance);
    partial void DeleteSystemPermession(SystemPermession instance);
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    #endregion
		
		public dbDataContext() : 
				base(global::XpremaDataLayer.Properties.Settings.Default.XpremaHRConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<AccountCategory> AccountCategories
		{
			get
			{
				return this.GetTable<AccountCategory>();
			}
		}
		
		public System.Data.Linq.Table<AccountDaily> AccountDailies
		{
			get
			{
				return this.GetTable<AccountDaily>();
			}
		}
		
		public System.Data.Linq.Table<Expenss> Expensses
		{
			get
			{
				return this.GetTable<Expenss>();
			}
		}
		
		public System.Data.Linq.Table<ExpenssesMovment> ExpenssesMovments
		{
			get
			{
				return this.GetTable<ExpenssesMovment>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeBasicInfo> EmployeeBasicInfos
		{
			get
			{
				return this.GetTable<EmployeeBasicInfo>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
		
		public System.Data.Linq.Table<JobGroup> JobGroups
		{
			get
			{
				return this.GetTable<JobGroup>();
			}
		}
		
		public System.Data.Linq.Table<SalaryItem> SalaryItems
		{
			get
			{
				return this.GetTable<SalaryItem>();
			}
		}
		
		public System.Data.Linq.Table<SalaryProfile> SalaryProfiles
		{
			get
			{
				return this.GetTable<SalaryProfile>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<GroupPermession> GroupPermessions
		{
			get
			{
				return this.GetTable<GroupPermession>();
			}
		}
		
		public System.Data.Linq.Table<SystemPermession> SystemPermessions
		{
			get
			{
				return this.GetTable<SystemPermession>();
			}
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroups
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AccountName;
		
		private string _Description;
		
		private System.Nullable<int> _CategoryID;
		
		private EntitySet<AccountDaily> _AccountDailies;
		
		private EntitySet<Expenss> _Expensses;
		
		private EntityRef<AccountCategory> _AccountCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccountNameChanging(string value);
    partial void OnAccountNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    #endregion
		
		public Account()
		{
			this._AccountDailies = new EntitySet<AccountDaily>(new Action<AccountDaily>(this.attach_AccountDailies), new Action<AccountDaily>(this.detach_AccountDailies));
			this._Expensses = new EntitySet<Expenss>(new Action<Expenss>(this.attach_Expensses), new Action<Expenss>(this.detach_Expensses));
			this._AccountCategory = default(EntityRef<AccountCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountName", DbType="NVarChar(50)")]
		public string AccountName
		{
			get
			{
				return this._AccountName;
			}
			set
			{
				if ((this._AccountName != value))
				{
					this.OnAccountNameChanging(value);
					this.SendPropertyChanging();
					this._AccountName = value;
					this.SendPropertyChanged("AccountName");
					this.OnAccountNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._AccountCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountDaily", Storage="_AccountDailies", ThisKey="ID", OtherKey="AccountID")]
		public EntitySet<AccountDaily> AccountDailies
		{
			get
			{
				return this._AccountDailies;
			}
			set
			{
				this._AccountDailies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Expenss", Storage="_Expensses", ThisKey="ID", OtherKey="AccountID")]
		public EntitySet<Expenss> Expensses
		{
			get
			{
				return this._Expensses;
			}
			set
			{
				this._Expensses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCategory_Account", Storage="_AccountCategory", ThisKey="CategoryID", OtherKey="ID", IsForeignKey=true)]
		public AccountCategory AccountCategory
		{
			get
			{
				return this._AccountCategory.Entity;
			}
			set
			{
				AccountCategory previousValue = this._AccountCategory.Entity;
				if (((previousValue != value) 
							|| (this._AccountCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountCategory.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._AccountCategory.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._CategoryID = value.ID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("AccountCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountDailies(AccountDaily entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountDailies(AccountDaily entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Expensses(Expenss entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Expensses(Expenss entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Security.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private string _Password;
		
		private System.Nullable<int> _GroupID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _CountryID;
		
		private EntityRef<EmployeeBasicInfo> _EmployeeBasicInfo;
		
		private EntityRef<City> _City;
		
		private EntityRef<UserGroup> _UserGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    #endregion
		
		public User()
		{
			this._EmployeeBasicInfo = default(EntityRef<EmployeeBasicInfo>);
			this._City = default(EntityRef<City>);
			this._UserGroup = default(EntityRef<UserGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._UserGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._EmployeeBasicInfo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeBasicInfo_User", Storage="_EmployeeBasicInfo", ThisKey="EmployeeID", OtherKey="SerialNumber", IsForeignKey=true, DeleteRule="CASCADE")]
		public EmployeeBasicInfo EmployeeBasicInfo
		{
			get
			{
				return this._EmployeeBasicInfo.Entity;
			}
			set
			{
				EmployeeBasicInfo previousValue = this._EmployeeBasicInfo.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeBasicInfo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeBasicInfo.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._EmployeeBasicInfo.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._EmployeeID = value.SerialNumber;
					}
					else
					{
						this._EmployeeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EmployeeBasicInfo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_User", Storage="_City", ThisKey="CountryID", OtherKey="id", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._CountryID = value.id;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_User", Storage="_UserGroup", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public UserGroup UserGroup
		{
			get
			{
				return this._UserGroup.Entity;
			}
			set
			{
				UserGroup previousValue = this._UserGroup.Entity;
				if (((previousValue != value) 
							|| (this._UserGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroup.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._UserGroup.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.AccountCategory")]
	public partial class AccountCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AccountCategoryName;
		
		private string _Description;
		
		private EntitySet<Account> _Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccountCategoryNameChanging(string value);
    partial void OnAccountCategoryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public AccountCategory()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountCategoryName", DbType="NVarChar(50)")]
		public string AccountCategoryName
		{
			get
			{
				return this._AccountCategoryName;
			}
			set
			{
				if ((this._AccountCategoryName != value))
				{
					this.OnAccountCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._AccountCategoryName = value;
					this.SendPropertyChanged("AccountCategoryName");
					this.OnAccountCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountCategory_Account", Storage="_Accounts", ThisKey="ID", OtherKey="CategoryID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountCategory = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.AccountCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.AccountDaily")]
	public partial class AccountDaily : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _AccountID;
		
		private System.Nullable<double> _TotalIn;
		
		private System.Nullable<double> _TotalOut;
		
		private System.Nullable<System.DateTime> _DateOfProcess;
		
		private string _Description;
		
		private string _CommandArg;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccountIDChanging(System.Nullable<int> value);
    partial void OnAccountIDChanged();
    partial void OnTotalInChanging(System.Nullable<double> value);
    partial void OnTotalInChanged();
    partial void OnTotalOutChanging(System.Nullable<double> value);
    partial void OnTotalOutChanged();
    partial void OnDateOfProcessChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfProcessChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCommandArgChanging(string value);
    partial void OnCommandArgChanged();
    #endregion
		
		public AccountDaily()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int")]
		public System.Nullable<int> AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalIn", DbType="Float")]
		public System.Nullable<double> TotalIn
		{
			get
			{
				return this._TotalIn;
			}
			set
			{
				if ((this._TotalIn != value))
				{
					this.OnTotalInChanging(value);
					this.SendPropertyChanging();
					this._TotalIn = value;
					this.SendPropertyChanged("TotalIn");
					this.OnTotalInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalOut", DbType="Float")]
		public System.Nullable<double> TotalOut
		{
			get
			{
				return this._TotalOut;
			}
			set
			{
				if ((this._TotalOut != value))
				{
					this.OnTotalOutChanging(value);
					this.SendPropertyChanging();
					this._TotalOut = value;
					this.SendPropertyChanged("TotalOut");
					this.OnTotalOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfProcess", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfProcess
		{
			get
			{
				return this._DateOfProcess;
			}
			set
			{
				if ((this._DateOfProcess != value))
				{
					this.OnDateOfProcessChanging(value);
					this.SendPropertyChanging();
					this._DateOfProcess = value;
					this.SendPropertyChanged("DateOfProcess");
					this.OnDateOfProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommandArg", DbType="NVarChar(50)")]
		public string CommandArg
		{
			get
			{
				return this._CommandArg;
			}
			set
			{
				if ((this._CommandArg != value))
				{
					this.OnCommandArgChanging(value);
					this.SendPropertyChanging();
					this._CommandArg = value;
					this.SendPropertyChanged("CommandArg");
					this.OnCommandArgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountDaily", Storage="_Account", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountDailies.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountDailies.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.Expensses")]
	public partial class Expenss : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ExpenssesName;
		
		private string _Description;
		
		private System.Nullable<int> _AccountID;
		
		private EntitySet<ExpenssesMovment> _ExpenssesMovments;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExpenssesNameChanging(string value);
    partial void OnExpenssesNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAccountIDChanging(System.Nullable<int> value);
    partial void OnAccountIDChanged();
    #endregion
		
		public Expenss()
		{
			this._ExpenssesMovments = new EntitySet<ExpenssesMovment>(new Action<ExpenssesMovment>(this.attach_ExpenssesMovments), new Action<ExpenssesMovment>(this.detach_ExpenssesMovments));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenssesName", DbType="NVarChar(50)")]
		public string ExpenssesName
		{
			get
			{
				return this._ExpenssesName;
			}
			set
			{
				if ((this._ExpenssesName != value))
				{
					this.OnExpenssesNameChanging(value);
					this.SendPropertyChanging();
					this._ExpenssesName = value;
					this.SendPropertyChanged("ExpenssesName");
					this.OnExpenssesNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(4000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="Int")]
		public System.Nullable<int> AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expenss_ExpenssesMovment", Storage="_ExpenssesMovments", ThisKey="ID", OtherKey="ExpenssesID")]
		public EntitySet<ExpenssesMovment> ExpenssesMovments
		{
			get
			{
				return this._ExpenssesMovments;
			}
			set
			{
				this._ExpenssesMovments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Expenss", Storage="_Account", ThisKey="AccountID", OtherKey="ID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Expensses.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Expensses.Add(this);
						this._AccountID = value.ID;
					}
					else
					{
						this._AccountID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpenssesMovments(ExpenssesMovment entity)
		{
			this.SendPropertyChanging();
			entity.Expenss = this;
		}
		
		private void detach_ExpenssesMovments(ExpenssesMovment entity)
		{
			this.SendPropertyChanging();
			entity.Expenss = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Accountant.ExpenssesMovment")]
	public partial class ExpenssesMovment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ExpenssesID;
		
		private System.Nullable<double> _Amount;
		
		private System.Nullable<System.DateTime> _DateOfProcess;
		
		private string _Description;
		
		private EntityRef<Expenss> _Expenss;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExpenssesIDChanging(System.Nullable<int> value);
    partial void OnExpenssesIDChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnDateOfProcessChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfProcessChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ExpenssesMovment()
		{
			this._Expenss = default(EntityRef<Expenss>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenssesID", DbType="Int")]
		public System.Nullable<int> ExpenssesID
		{
			get
			{
				return this._ExpenssesID;
			}
			set
			{
				if ((this._ExpenssesID != value))
				{
					if (this._Expenss.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpenssesIDChanging(value);
					this.SendPropertyChanging();
					this._ExpenssesID = value;
					this.SendPropertyChanged("ExpenssesID");
					this.OnExpenssesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfProcess", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateOfProcess
		{
			get
			{
				return this._DateOfProcess;
			}
			set
			{
				if ((this._DateOfProcess != value))
				{
					this.OnDateOfProcessChanging(value);
					this.SendPropertyChanging();
					this._DateOfProcess = value;
					this.SendPropertyChanged("DateOfProcess");
					this.OnDateOfProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expenss_ExpenssesMovment", Storage="_Expenss", ThisKey="ExpenssesID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Expenss Expenss
		{
			get
			{
				return this._Expenss.Entity;
			}
			set
			{
				Expenss previousValue = this._Expenss.Entity;
				if (((previousValue != value) 
							|| (this._Expenss.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expenss.Entity = null;
						previousValue.ExpenssesMovments.Remove(this);
					}
					this._Expenss.Entity = value;
					if ((value != null))
					{
						value.ExpenssesMovments.Add(this);
						this._ExpenssesID = value.ID;
					}
					else
					{
						this._ExpenssesID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expenss");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmpInfo.EmployeeBasicInfo")]
	public partial class EmployeeBasicInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SerialNumber;
		
		private System.Guid _EmpNumber;
		
		private string _EmpName;
		
		private string _Address;
		
		private string _MobileNo;
		
		private string _Email;
		
		private string _BloodGroup;
		
		private string _Nationalty;
		
		private string _nationaltyID;
		
		private string _status;
		
		private System.Nullable<int> _JobID;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _HereDate;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Job> _Job;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSerialNumberChanging(int value);
    partial void OnSerialNumberChanged();
    partial void OnEmpNumberChanging(System.Guid value);
    partial void OnEmpNumberChanged();
    partial void OnEmpNameChanging(string value);
    partial void OnEmpNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnMobileNoChanging(string value);
    partial void OnMobileNoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnBloodGroupChanging(string value);
    partial void OnBloodGroupChanged();
    partial void OnNationaltyChanging(string value);
    partial void OnNationaltyChanged();
    partial void OnnationaltyIDChanging(string value);
    partial void OnnationaltyIDChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OnJobIDChanging(System.Nullable<int> value);
    partial void OnJobIDChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnHereDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHereDateChanged();
    #endregion
		
		public EmployeeBasicInfo()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Job = default(EntityRef<Job>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpNumber", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EmpNumber
		{
			get
			{
				return this._EmpNumber;
			}
			set
			{
				if ((this._EmpNumber != value))
				{
					this.OnEmpNumberChanging(value);
					this.SendPropertyChanging();
					this._EmpNumber = value;
					this.SendPropertyChanged("EmpNumber");
					this.OnEmpNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmpName", DbType="NChar(10)")]
		public string EmpName
		{
			get
			{
				return this._EmpName;
			}
			set
			{
				if ((this._EmpName != value))
				{
					this.OnEmpNameChanging(value);
					this.SendPropertyChanging();
					this._EmpName = value;
					this.SendPropertyChanged("EmpName");
					this.OnEmpNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileNo", DbType="NChar(10)")]
		public string MobileNo
		{
			get
			{
				return this._MobileNo;
			}
			set
			{
				if ((this._MobileNo != value))
				{
					this.OnMobileNoChanging(value);
					this.SendPropertyChanging();
					this._MobileNo = value;
					this.SendPropertyChanged("MobileNo");
					this.OnMobileNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NChar(60)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodGroup", DbType="NVarChar(50)")]
		public string BloodGroup
		{
			get
			{
				return this._BloodGroup;
			}
			set
			{
				if ((this._BloodGroup != value))
				{
					this.OnBloodGroupChanging(value);
					this.SendPropertyChanging();
					this._BloodGroup = value;
					this.SendPropertyChanged("BloodGroup");
					this.OnBloodGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nationalty", DbType="NVarChar(MAX)")]
		public string Nationalty
		{
			get
			{
				return this._Nationalty;
			}
			set
			{
				if ((this._Nationalty != value))
				{
					this.OnNationaltyChanging(value);
					this.SendPropertyChanging();
					this._Nationalty = value;
					this.SendPropertyChanged("Nationalty");
					this.OnNationaltyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nationaltyID", DbType="NVarChar(60)")]
		public string nationaltyID
		{
			get
			{
				return this._nationaltyID;
			}
			set
			{
				if ((this._nationaltyID != value))
				{
					this.OnnationaltyIDChanging(value);
					this.SendPropertyChanging();
					this._nationaltyID = value;
					this.SendPropertyChanged("nationaltyID");
					this.OnnationaltyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="NVarChar(50)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobID", DbType="Int")]
		public System.Nullable<int> JobID
		{
			get
			{
				return this._JobID;
			}
			set
			{
				if ((this._JobID != value))
				{
					if (this._Job.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnJobIDChanging(value);
					this.SendPropertyChanging();
					this._JobID = value;
					this.SendPropertyChanged("JobID");
					this.OnJobIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HereDate", DbType="Date")]
		public System.Nullable<System.DateTime> HereDate
		{
			get
			{
				return this._HereDate;
			}
			set
			{
				if ((this._HereDate != value))
				{
					this.OnHereDateChanging(value);
					this.SendPropertyChanging();
					this._HereDate = value;
					this.SendPropertyChanged("HereDate");
					this.OnHereDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeBasicInfo_User", Storage="_Users", ThisKey="SerialNumber", OtherKey="EmployeeID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_EmployeeBasicInfo", Storage="_Job", ThisKey="JobID", OtherKey="ID", IsForeignKey=true)]
		public Job Job
		{
			get
			{
				return this._Job.Entity;
			}
			set
			{
				Job previousValue = this._Job.Entity;
				if (((previousValue != value) 
							|| (this._Job.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Job.Entity = null;
						previousValue.EmployeeBasicInfos.Remove(this);
					}
					this._Job.Entity = value;
					if ((value != null))
					{
						value.EmployeeBasicInfos.Add(this);
						this._JobID = value.ID;
					}
					else
					{
						this._JobID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Job");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeBasicInfo = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeBasicInfo = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmpInfo.Job")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _JobName;
		
		private string _JobDescription;
		
		private System.Nullable<int> _GroupID;
		
		private EntitySet<EmployeeBasicInfo> _EmployeeBasicInfos;
		
		private EntityRef<JobGroup> _JobGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnJobNameChanging(string value);
    partial void OnJobNameChanged();
    partial void OnJobDescriptionChanging(string value);
    partial void OnJobDescriptionChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    #endregion
		
		public Job()
		{
			this._EmployeeBasicInfos = new EntitySet<EmployeeBasicInfo>(new Action<EmployeeBasicInfo>(this.attach_EmployeeBasicInfos), new Action<EmployeeBasicInfo>(this.detach_EmployeeBasicInfos));
			this._JobGroup = default(EntityRef<JobGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobName", DbType="NVarChar(50)")]
		public string JobName
		{
			get
			{
				return this._JobName;
			}
			set
			{
				if ((this._JobName != value))
				{
					this.OnJobNameChanging(value);
					this.SendPropertyChanging();
					this._JobName = value;
					this.SendPropertyChanged("JobName");
					this.OnJobNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobDescription", DbType="NVarChar(500)")]
		public string JobDescription
		{
			get
			{
				return this._JobDescription;
			}
			set
			{
				if ((this._JobDescription != value))
				{
					this.OnJobDescriptionChanging(value);
					this.SendPropertyChanging();
					this._JobDescription = value;
					this.SendPropertyChanged("JobDescription");
					this.OnJobDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._JobGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Job_EmployeeBasicInfo", Storage="_EmployeeBasicInfos", ThisKey="ID", OtherKey="JobID")]
		public EntitySet<EmployeeBasicInfo> EmployeeBasicInfos
		{
			get
			{
				return this._EmployeeBasicInfos;
			}
			set
			{
				this._EmployeeBasicInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobGroup_Job", Storage="_JobGroup", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET DEFAULT")]
		public JobGroup JobGroup
		{
			get
			{
				return this._JobGroup.Entity;
			}
			set
			{
				JobGroup previousValue = this._JobGroup.Entity;
				if (((previousValue != value) 
							|| (this._JobGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._JobGroup.Entity = null;
						previousValue.Jobs.Remove(this);
					}
					this._JobGroup.Entity = value;
					if ((value != null))
					{
						value.Jobs.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("JobGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeBasicInfos(EmployeeBasicInfo entity)
		{
			this.SendPropertyChanging();
			entity.Job = this;
		}
		
		private void detach_EmployeeBasicInfos(EmployeeBasicInfo entity)
		{
			this.SendPropertyChanging();
			entity.Job = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmpInfo.JobGroup")]
	public partial class JobGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _JobGroupName;
		
		private string _JobGroupDescription;
		
		private EntitySet<Job> _Jobs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnJobGroupNameChanging(string value);
    partial void OnJobGroupNameChanged();
    partial void OnJobGroupDescriptionChanging(string value);
    partial void OnJobGroupDescriptionChanged();
    #endregion
		
		public JobGroup()
		{
			this._Jobs = new EntitySet<Job>(new Action<Job>(this.attach_Jobs), new Action<Job>(this.detach_Jobs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobGroupName", DbType="NVarChar(50)")]
		public string JobGroupName
		{
			get
			{
				return this._JobGroupName;
			}
			set
			{
				if ((this._JobGroupName != value))
				{
					this.OnJobGroupNameChanging(value);
					this.SendPropertyChanging();
					this._JobGroupName = value;
					this.SendPropertyChanged("JobGroupName");
					this.OnJobGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JobGroupDescription", DbType="NVarChar(500)")]
		public string JobGroupDescription
		{
			get
			{
				return this._JobGroupDescription;
			}
			set
			{
				if ((this._JobGroupDescription != value))
				{
					this.OnJobGroupDescriptionChanging(value);
					this.SendPropertyChanging();
					this._JobGroupDescription = value;
					this.SendPropertyChanged("JobGroupDescription");
					this.OnJobGroupDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="JobGroup_Job", Storage="_Jobs", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<Job> Jobs
		{
			get
			{
				return this._Jobs;
			}
			set
			{
				this._Jobs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.JobGroup = this;
		}
		
		private void detach_Jobs(Job entity)
		{
			this.SendPropertyChanging();
			entity.JobGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmpInfo.SalaryItem")]
	public partial class SalaryItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _SalaryItem1;
		
		private string _SalaryItemDescription;
		
		private string _SelaryDirection;
		
		private System.Nullable<System.Guid> @__SerialNumber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSalaryItem1Changing(string value);
    partial void OnSalaryItem1Changed();
    partial void OnSalaryItemDescriptionChanging(string value);
    partial void OnSalaryItemDescriptionChanged();
    partial void OnSelaryDirectionChanging(string value);
    partial void OnSelaryDirectionChanged();
    partial void On_SerialNumberChanging(System.Nullable<System.Guid> value);
    partial void On_SerialNumberChanged();
    #endregion
		
		public SalaryItem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SalaryItem", Storage="_SalaryItem1", DbType="NVarChar(50)")]
		public string SalaryItem1
		{
			get
			{
				return this._SalaryItem1;
			}
			set
			{
				if ((this._SalaryItem1 != value))
				{
					this.OnSalaryItem1Changing(value);
					this.SendPropertyChanging();
					this._SalaryItem1 = value;
					this.SendPropertyChanged("SalaryItem1");
					this.OnSalaryItem1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryItemDescription", DbType="NVarChar(500)")]
		public string SalaryItemDescription
		{
			get
			{
				return this._SalaryItemDescription;
			}
			set
			{
				if ((this._SalaryItemDescription != value))
				{
					this.OnSalaryItemDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SalaryItemDescription = value;
					this.SendPropertyChanged("SalaryItemDescription");
					this.OnSalaryItemDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelaryDirection", DbType="NVarChar(50)")]
		public string SelaryDirection
		{
			get
			{
				return this._SelaryDirection;
			}
			set
			{
				if ((this._SelaryDirection != value))
				{
					this.OnSelaryDirectionChanging(value);
					this.SendPropertyChanging();
					this._SelaryDirection = value;
					this.SendPropertyChanged("SelaryDirection");
					this.OnSelaryDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_SerialNumber]", Storage="__SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> _SerialNumber
		{
			get
			{
				return this.@__SerialNumber;
			}
			set
			{
				if ((this.@__SerialNumber != value))
				{
					this.On_SerialNumberChanging(value);
					this.SendPropertyChanging();
					this.@__SerialNumber = value;
					this.SendPropertyChanged("_SerialNumber");
					this.On_SerialNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="EmpInfo.SalaryProfile")]
	public partial class SalaryProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _EmployeeID;
		
		private System.Nullable<int> _SalaryItemID;
		
		private System.Nullable<double> _Amount;
		
		private System.Nullable<System.Guid> @__SerialNumber;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmployeeIDChanging(System.Nullable<int> value);
    partial void OnEmployeeIDChanged();
    partial void OnSalaryItemIDChanging(System.Nullable<int> value);
    partial void OnSalaryItemIDChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void On_SerialNumberChanging(System.Nullable<System.Guid> value);
    partial void On_SerialNumberChanged();
    #endregion
		
		public SalaryProfile()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int")]
		public System.Nullable<int> EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryItemID", DbType="Int")]
		public System.Nullable<int> SalaryItemID
		{
			get
			{
				return this._SalaryItemID;
			}
			set
			{
				if ((this._SalaryItemID != value))
				{
					this.OnSalaryItemIDChanging(value);
					this.SendPropertyChanging();
					this._SalaryItemID = value;
					this.SendPropertyChanged("SalaryItemID");
					this.OnSalaryItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[_SerialNumber]", Storage="__SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> _SerialNumber
		{
			get
			{
				return this.@__SerialNumber;
			}
			set
			{
				if ((this.@__SerialNumber != value))
				{
					this.On_SerialNumberChanging(value);
					this.SendPropertyChanging();
					this.@__SerialNumber = value;
					this.SendPropertyChanged("_SerialNumber");
					this.On_SerialNumberChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="localize.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _cityName;
		
		private string _description;
		
		private System.Nullable<int> _counrtyID;
		
		private EntitySet<User> _Users;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OncityNameChanging(string value);
    partial void OncityNameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OncounrtyIDChanging(System.Nullable<int> value);
    partial void OncounrtyIDChanged();
    #endregion
		
		public City()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cityName", DbType="NVarChar(50)")]
		public string cityName
		{
			get
			{
				return this._cityName;
			}
			set
			{
				if ((this._cityName != value))
				{
					this.OncityNameChanging(value);
					this.SendPropertyChanging();
					this._cityName = value;
					this.SendPropertyChanged("cityName");
					this.OncityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_counrtyID", DbType="Int")]
		public System.Nullable<int> counrtyID
		{
			get
			{
				return this._counrtyID;
			}
			set
			{
				if ((this._counrtyID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncounrtyIDChanging(value);
					this.SendPropertyChanging();
					this._counrtyID = value;
					this.SendPropertyChanged("counrtyID");
					this.OncounrtyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_User", Storage="_Users", ThisKey="id", OtherKey="CountryID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Country", ThisKey="counrtyID", OtherKey="ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._counrtyID = value.ID;
					}
					else
					{
						this._counrtyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="localize.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CountryName;
		
		private string _description;
		
		private System.Nullable<System.Guid> _SerialNumber;
		
		private EntitySet<City> _Cities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnSerialNumberChanging(System.Nullable<System.Guid> value);
    partial void OnSerialNumberChanged();
    #endregion
		
		public Country()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="NVarChar(50)")]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(MAX)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNumber", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SerialNumber
		{
			get
			{
				return this._SerialNumber;
			}
			set
			{
				if ((this._SerialNumber != value))
				{
					this.OnSerialNumberChanging(value);
					this.SendPropertyChanging();
					this._SerialNumber = value;
					this.SendPropertyChanged("SerialNumber");
					this.OnSerialNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Cities", ThisKey="ID", OtherKey="counrtyID")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Security.GroupPermession")]
	public partial class GroupPermession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _GroupID;
		
		private System.Nullable<int> _PermessionID;
		
		private string _ValueX;
		
		private System.Data.Linq.Binary _AlternateValue;
		
		private EntityRef<SystemPermession> _SystemPermession;
		
		private EntityRef<UserGroup> _UserGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnPermessionIDChanging(System.Nullable<int> value);
    partial void OnPermessionIDChanged();
    partial void OnValueXChanging(string value);
    partial void OnValueXChanged();
    partial void OnAlternateValueChanging(System.Data.Linq.Binary value);
    partial void OnAlternateValueChanged();
    #endregion
		
		public GroupPermession()
		{
			this._SystemPermession = default(EntityRef<SystemPermession>);
			this._UserGroup = default(EntityRef<UserGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._UserGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermessionID", DbType="Int")]
		public System.Nullable<int> PermessionID
		{
			get
			{
				return this._PermessionID;
			}
			set
			{
				if ((this._PermessionID != value))
				{
					if (this._SystemPermession.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermessionIDChanging(value);
					this.SendPropertyChanging();
					this._PermessionID = value;
					this.SendPropertyChanged("PermessionID");
					this.OnPermessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueX", DbType="NVarChar(MAX)")]
		public string ValueX
		{
			get
			{
				return this._ValueX;
			}
			set
			{
				if ((this._ValueX != value))
				{
					this.OnValueXChanging(value);
					this.SendPropertyChanging();
					this._ValueX = value;
					this.SendPropertyChanged("ValueX");
					this.OnValueXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlternateValue", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary AlternateValue
		{
			get
			{
				return this._AlternateValue;
			}
			set
			{
				if ((this._AlternateValue != value))
				{
					this.OnAlternateValueChanging(value);
					this.SendPropertyChanging();
					this._AlternateValue = value;
					this.SendPropertyChanged("AlternateValue");
					this.OnAlternateValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemPermession_GroupPermession", Storage="_SystemPermession", ThisKey="PermessionID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public SystemPermession SystemPermession
		{
			get
			{
				return this._SystemPermession.Entity;
			}
			set
			{
				SystemPermession previousValue = this._SystemPermession.Entity;
				if (((previousValue != value) 
							|| (this._SystemPermession.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemPermession.Entity = null;
						previousValue.GroupPermessions.Remove(this);
					}
					this._SystemPermession.Entity = value;
					if ((value != null))
					{
						value.GroupPermessions.Add(this);
						this._PermessionID = value.ID;
					}
					else
					{
						this._PermessionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SystemPermession");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_GroupPermession", Storage="_UserGroup", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true)]
		public UserGroup UserGroup
		{
			get
			{
				return this._UserGroup.Entity;
			}
			set
			{
				UserGroup previousValue = this._UserGroup.Entity;
				if (((previousValue != value) 
							|| (this._UserGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserGroup.Entity = null;
						previousValue.GroupPermessions.Remove(this);
					}
					this._UserGroup.Entity = value;
					if ((value != null))
					{
						value.GroupPermessions.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Security.SystemPermession")]
	public partial class SystemPermession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PermessionName;
		
		private string _PermessionDescription;
		
		private string _PermessionType;
		
		private EntitySet<GroupPermession> _GroupPermessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPermessionNameChanging(string value);
    partial void OnPermessionNameChanged();
    partial void OnPermessionDescriptionChanging(string value);
    partial void OnPermessionDescriptionChanged();
    partial void OnPermessionTypeChanging(string value);
    partial void OnPermessionTypeChanged();
    #endregion
		
		public SystemPermession()
		{
			this._GroupPermessions = new EntitySet<GroupPermession>(new Action<GroupPermession>(this.attach_GroupPermessions), new Action<GroupPermession>(this.detach_GroupPermessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermessionName", DbType="NVarChar(50)")]
		public string PermessionName
		{
			get
			{
				return this._PermessionName;
			}
			set
			{
				if ((this._PermessionName != value))
				{
					this.OnPermessionNameChanging(value);
					this.SendPropertyChanging();
					this._PermessionName = value;
					this.SendPropertyChanged("PermessionName");
					this.OnPermessionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermessionDescription", DbType="NVarChar(500)")]
		public string PermessionDescription
		{
			get
			{
				return this._PermessionDescription;
			}
			set
			{
				if ((this._PermessionDescription != value))
				{
					this.OnPermessionDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PermessionDescription = value;
					this.SendPropertyChanged("PermessionDescription");
					this.OnPermessionDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermessionType", DbType="NVarChar(50)")]
		public string PermessionType
		{
			get
			{
				return this._PermessionType;
			}
			set
			{
				if ((this._PermessionType != value))
				{
					this.OnPermessionTypeChanging(value);
					this.SendPropertyChanging();
					this._PermessionType = value;
					this.SendPropertyChanged("PermessionType");
					this.OnPermessionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemPermession_GroupPermession", Storage="_GroupPermessions", ThisKey="ID", OtherKey="PermessionID")]
		public EntitySet<GroupPermession> GroupPermessions
		{
			get
			{
				return this._GroupPermessions;
			}
			set
			{
				this._GroupPermessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupPermessions(GroupPermession entity)
		{
			this.SendPropertyChanging();
			entity.SystemPermession = this;
		}
		
		private void detach_GroupPermessions(GroupPermession entity)
		{
			this.SendPropertyChanging();
			entity.SystemPermession = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Security.UserGroup")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _GroupName;
		
		private string _GroupDescription;
		
		private EntitySet<User> _Users;
		
		private EntitySet<GroupPermession> _GroupPermessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    partial void OnGroupDescriptionChanging(string value);
    partial void OnGroupDescriptionChanged();
    #endregion
		
		public UserGroup()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._GroupPermessions = new EntitySet<GroupPermession>(new Action<GroupPermession>(this.attach_GroupPermessions), new Action<GroupPermession>(this.detach_GroupPermessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="NVarChar(50)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupDescription", DbType="NVarChar(500)")]
		public string GroupDescription
		{
			get
			{
				return this._GroupDescription;
			}
			set
			{
				if ((this._GroupDescription != value))
				{
					this.OnGroupDescriptionChanging(value);
					this.SendPropertyChanging();
					this._GroupDescription = value;
					this.SendPropertyChanged("GroupDescription");
					this.OnGroupDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_User", Storage="_Users", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_GroupPermession", Storage="_GroupPermessions", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<GroupPermession> GroupPermessions
		{
			get
			{
				return this._GroupPermessions;
			}
			set
			{
				this._GroupPermessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = null;
		}
		
		private void attach_GroupPermessions(GroupPermession entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = this;
		}
		
		private void detach_GroupPermessions(GroupPermession entity)
		{
			this.SendPropertyChanging();
			entity.UserGroup = null;
		}
	}
}
#pragma warning restore 1591
